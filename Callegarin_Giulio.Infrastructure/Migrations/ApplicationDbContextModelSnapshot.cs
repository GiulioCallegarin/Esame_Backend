// <auto-generated />
using System;
using Callegarin_Giulio.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Callegarin_Giulio.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Callegarin_Giulio.Shared.Entities.Appointment", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfessorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time without time zone");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("StudentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Callegarin_Giulio.Shared.Entities.Professor", b =>
                {
                    b.Property<Guid>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("PrefersVideo")
                        .HasColumnType("boolean");

                    b.Property<string>("ReceptionAvailability")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("TeachingAvailability")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("integer");

                    b.HasKey("ProfessorId");

                    b.ToTable("Professors");

                    b.HasData(
                        new
                        {
                            ProfessorId = new Guid("97c5a08c-c14e-4773-95eb-926298ec7370"),
                            FirstName = "Stefania",
                            LastName = "Sardi",
                            PrefersVideo = false,
                            ReceptionAvailability = "Monday,Thursday",
                            Specialization = "Math",
                            TeachingAvailability = "Monday,Thursday,Friday",
                            YearsOfExperience = 7
                        },
                        new
                        {
                            ProfessorId = new Guid("ca4a4974-90b5-4291-ad1c-4e27da44c240"),
                            FirstName = "Gianpietro",
                            LastName = "Vecchi",
                            PrefersVideo = false,
                            ReceptionAvailability = "Tuesday,Friday",
                            Specialization = "English",
                            TeachingAvailability = "Tuesday,Thursday,Friday",
                            YearsOfExperience = 3
                        },
                        new
                        {
                            ProfessorId = new Guid("3fda0d02-eded-4c1e-ac56-ee17d54c1481"),
                            FirstName = "Silvia",
                            LastName = "Zuliani",
                            PrefersVideo = true,
                            ReceptionAvailability = "Thursday,Friday,Saturday",
                            Specialization = "IT",
                            TeachingAvailability = "Wednesday,Saturday",
                            YearsOfExperience = 5
                        });
                });

            modelBuilder.Entity("Callegarin_Giulio.Shared.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalNotes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            StudentId = new Guid("4e9e22ff-a2df-4688-ae14-1cfeb6371d14"),
                            AdditionalNotes = "",
                            BirthDate = new DateOnly(2002, 7, 23),
                            Email = "franco.berrucci@example.com",
                            FirstName = "Franco",
                            LastName = "Berrucci",
                            Phone = "+393492546954"
                        },
                        new
                        {
                            StudentId = new Guid("7d9ff0f9-ac3d-4037-8b9b-6f5d1128a904"),
                            AdditionalNotes = "",
                            BirthDate = new DateOnly(2001, 4, 16),
                            Email = "gianpaolo.geppetto@example.com",
                            FirstName = "Gianpaolo",
                            LastName = "Geppetto",
                            Phone = "+393474526398"
                        },
                        new
                        {
                            StudentId = new Guid("1aaa6fc6-56aa-454e-8a5c-33a43290b82a"),
                            AdditionalNotes = "",
                            BirthDate = new DateOnly(2002, 10, 28),
                            Email = "stefano.bianchi@example.com",
                            FirstName = "Stefano",
                            LastName = "Bianchi",
                            Phone = "+393516954821"
                        },
                        new
                        {
                            StudentId = new Guid("85a02d6a-05e1-40f2-a4cd-90ada9fc67f7"),
                            AdditionalNotes = "",
                            BirthDate = new DateOnly(2003, 1, 8),
                            Email = "miriam.rossi@example.com",
                            FirstName = "Miriam",
                            LastName = "Rossi",
                            Phone = "+393336954712"
                        },
                        new
                        {
                            StudentId = new Guid("9bca8410-1515-47b0-8033-1d412172c6a1"),
                            AdditionalNotes = "",
                            BirthDate = new DateOnly(2002, 6, 7),
                            Email = "anna.carducci@example.com",
                            FirstName = "Anna",
                            LastName = "Carducci",
                            Phone = "+393423698562"
                        });
                });

            modelBuilder.Entity("Callegarin_Giulio.Shared.Entities.Appointment", b =>
                {
                    b.HasOne("Callegarin_Giulio.Shared.Entities.Professor", "Professor")
                        .WithMany("Appointments")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Callegarin_Giulio.Shared.Entities.Student", "Student")
                        .WithMany("Appointments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Callegarin_Giulio.Shared.Entities.Professor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Callegarin_Giulio.Shared.Entities.Student", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
